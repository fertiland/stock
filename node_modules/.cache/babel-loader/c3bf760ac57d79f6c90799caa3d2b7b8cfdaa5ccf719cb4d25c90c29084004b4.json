{"ast":null,"code":"// src/services/ollamaService/index.js\n\nimport env from '../../config/env';\nexport const generateAnalysis = async prompt => {\n  console.info(\"generateAnalysis is called.\");\n  try {\n    const response = await fetch(`${env.OLLAMA_BASE_URL}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: 'mistral',\n        prompt: prompt,\n        stream: false\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to connect to Ollama: ${response.statusText}`);\n    } else {\n      const arrayBuffer = await response.arrayBuffer();\n      const jsonResult = JSON.parse(new TextDecoder('utf-8').decode(arrayBuffer));\n      console.info('Analysis result:', jsonResult);\n      return jsonResult;\n    }\n  } catch (error) {\n    console.error(error);\n    // You can also rethrow the error or handle it further depending on your requirements.\n  }\n};","map":{"version":3,"names":["env","generateAnalysis","prompt","console","info","response","fetch","OLLAMA_BASE_URL","method","headers","body","JSON","stringify","model","stream","ok","Error","statusText","arrayBuffer","jsonResult","parse","TextDecoder","decode","error"],"sources":["/home/hsing/pro/stock-analysis-app/src/services/ollamaService/index.js"],"sourcesContent":["// src/services/ollamaService/index.js\n\nimport env from '../../config/env';\n\nexport const generateAnalysis = async (prompt) => {\n  console.info(\"generateAnalysis is called.\");\n  try {\n    const response = await fetch(`${env.OLLAMA_BASE_URL}/api/generate`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'mistral',\n        prompt: prompt,\n        stream: false\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to connect to Ollama: ${response.statusText}`);\n    } else {\n      const arrayBuffer = await response.arrayBuffer();\n      const jsonResult = JSON.parse(new TextDecoder('utf-8').decode(arrayBuffer));\n      console.info('Analysis result:', jsonResult);\n      return jsonResult;\n    }    \n  } catch (error) {\n    console.error(error);\n    // You can also rethrow the error or handle it further depending on your requirements.\n  }\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,GAAG,MAAM,kBAAkB;AAElC,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,MAAM,IAAK;EAChDC,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;EAC3C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,GAAG,CAACO,eAAe,eAAe,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAE,SAAS;QAChBX,MAAM,EAAEA,MAAM;QACdY,MAAM,EAAE;MACV,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgCX,QAAQ,CAACY,UAAU,EAAE,CAAC;IACxE,CAAC,MAAM;MACL,MAAMC,WAAW,GAAG,MAAMb,QAAQ,CAACa,WAAW,CAAC,CAAC;MAChD,MAAMC,UAAU,GAAGR,IAAI,CAACS,KAAK,CAAC,IAAIC,WAAW,CAAC,OAAO,CAAC,CAACC,MAAM,CAACJ,WAAW,CAAC,CAAC;MAC3Ef,OAAO,CAACC,IAAI,CAAC,kBAAkB,EAAEe,UAAU,CAAC;MAC5C,OAAOA,UAAU;IACnB;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAACA,KAAK,CAAC;IACpB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
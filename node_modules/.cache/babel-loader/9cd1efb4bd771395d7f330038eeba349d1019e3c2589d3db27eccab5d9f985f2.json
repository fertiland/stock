{"ast":null,"code":"// src/utils/helpers/index.js\nexport const parseResponse = text => {\n  try {\n    // Ensure the input is valid\n    if (!text || typeof text !== 'string') {\n      throw new TypeError('Invalid input: text must be a non-empty string.');\n    }\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      console.info('jsonMatch: ', jsonMatch);\n      return JSON.parse(jsonMatch[0]);\n    }\n    throw new Error('No JSON found in response');\n  } catch (error) {\n    console.error('Error parsing response:', error);\n    throw error;\n  }\n};\nexport const generatePrompt = (type, stockSymbol) => {\n  const prompts = {\n    technical: `Analyze the technical aspects of ${stockSymbol} stock. Format response as JSON with fields and types specified:\n        summary (string),\n        recommendation (string),\n        indicators: {\n          rsi (number),\n          macd (string),\n          movingAverages (string)\n        },\n        priceHistory: Array of { date, price, volume },\n        signals: Array of { type: 'bullish' | 'bearish', name: string, description: string },\n        supportLevels: number[],\n        resistanceLevels: number[]\n      `,\n    fundamental: `Analyze the fundamental aspects of ${stockSymbol} stock. Consider financial metrics, company performance, and growth potential. Format the response as JSON with fields: summary (string), recommendation (string), and metrics (object with fields: peRatio (number), eps (number), debtToEquity (number)).`,\n    sentiment: `Analyze the market sentiment for ${stockSymbol} stock. Consider news, social media, and analyst opinions. Format the response as JSON with fields: summary (string), recommendation (string), and metrics (object with fields: newsScore (number), socialMediaBuzz (string), analystRatings (string)).`\n  };\n  return prompts[type];\n};","map":{"version":3,"names":["parseResponse","text","TypeError","jsonMatch","match","console","info","JSON","parse","Error","error","generatePrompt","type","stockSymbol","prompts","technical","fundamental","sentiment"],"sources":["/home/hsing/pro/stock-analysis-app/src/utils/helpers/index.js"],"sourcesContent":["// src/utils/helpers/index.js\nexport const parseResponse = (text) => {\n  try {\n    // Ensure the input is valid\n    if (!text || typeof text !== 'string') {\n      throw new TypeError('Invalid input: text must be a non-empty string.');\n    }\n    const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n    if (jsonMatch) {\n      console.info('jsonMatch: ', jsonMatch)\n      return JSON.parse(jsonMatch[0]);\n    }\n    throw new Error('No JSON found in response');\n  } catch (error) {\n    console.error('Error parsing response:', error);\n    throw error;\n  }\n};\n\nexport const generatePrompt = (type, stockSymbol) => {\n  const prompts = {\n    technical: `Analyze the technical aspects of ${stockSymbol} stock. Format response as JSON with fields and types specified:\n        summary (string),\n        recommendation (string),\n        indicators: {\n          rsi (number),\n          macd (string),\n          movingAverages (string)\n        },\n        priceHistory: Array of { date, price, volume },\n        signals: Array of { type: 'bullish' | 'bearish', name: string, description: string },\n        supportLevels: number[],\n        resistanceLevels: number[]\n      `,\n    fundamental: `Analyze the fundamental aspects of ${stockSymbol} stock. Consider financial metrics, company performance, and growth potential. Format the response as JSON with fields: summary (string), recommendation (string), and metrics (object with fields: peRatio (number), eps (number), debtToEquity (number)).`,\n\n    sentiment: `Analyze the market sentiment for ${stockSymbol} stock. Consider news, social media, and analyst opinions. Format the response as JSON with fields: summary (string), recommendation (string), and metrics (object with fields: newsScore (number), socialMediaBuzz (string), analystRatings (string)).`\n  };\n  return prompts[type];\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,aAAa,GAAIC,IAAI,IAAK;EACrC,IAAI;IACF;IACA,IAAI,CAACA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACrC,MAAM,IAAIC,SAAS,CAAC,iDAAiD,CAAC;IACxE;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK,CAAC,aAAa,CAAC;IAC3C,IAAID,SAAS,EAAE;MACbE,OAAO,CAACC,IAAI,CAAC,aAAa,EAAEH,SAAS,CAAC;MACtC,OAAOI,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC;IACjC;IACA,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAAC;EAC9C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAEC,WAAW,KAAK;EACnD,MAAMC,OAAO,GAAG;IACdC,SAAS,EAAE,oCAAoCF,WAAW;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;IACHG,WAAW,EAAE,sCAAsCH,WAAW,6PAA6P;IAE3TI,SAAS,EAAE,oCAAoCJ,WAAW;EAC5D,CAAC;EACD,OAAOC,OAAO,CAACF,IAAI,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
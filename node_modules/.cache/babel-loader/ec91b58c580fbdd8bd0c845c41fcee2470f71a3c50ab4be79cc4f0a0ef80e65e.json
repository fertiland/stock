{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useStockAnalysis/index.js\nimport { useState } from 'react';\nimport { generateAnalysis } from '../../services/ollamaService';\nimport { parseResponse, generatePrompt } from '../../utils/helpers';\nexport const useStockAnalysis = () => {\n  _s();\n  const [analysis, setAnalysis] = useState({\n    technical: null,\n    fundamental: null,\n    sentiment: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  //   const performAnalysis = async (type, stockSymbol) => {\n  //     if (!stockSymbol) {\n  //       setError('Please enter a stock symbol');\n  //       return;\n  //     }\n\n  //     setLoading(true);\n  //     setError(null);\n\n  //     try {\n  //       const prompt = generatePrompt(type, stockSymbol);\n  //       const data = await generateAnalysis(prompt);\n  //       const analysisResult = parseResponse(data.response);\n\n  //       setAnalysis(prev => ({\n  //         ...prev,\n  //         [type]: analysisResult\n  //       }));\n  //     } catch (error) {\n  //       console.error('Analysis error:', error);\n  //       setError('Failed to perform analysis. Please try again.');\n  //     } finally {\n  //       setLoading(false);\n  //     }\n  //   };\n\n  return {\n    analysis,\n    loading,\n    error,\n    performAnalysis\n  };\n};\n_s(useStockAnalysis, \"jwjFhbQaSpf119HGkzENbe1S4zU=\");","map":{"version":3,"names":["useState","generateAnalysis","parseResponse","generatePrompt","useStockAnalysis","_s","analysis","setAnalysis","technical","fundamental","sentiment","loading","setLoading","error","setError","performAnalysis"],"sources":["/home/hsing/pro/stock-analysis-app/src/hooks/useStockAnalysis/index.js"],"sourcesContent":["// src/hooks/useStockAnalysis/index.js\nimport { useState } from 'react';\nimport { generateAnalysis } from '../../services/ollamaService';\nimport { parseResponse, generatePrompt } from '../../utils/helpers';\n\nexport const useStockAnalysis = () => {\n  const [analysis, setAnalysis] = useState({\n    technical: null,\n    fundamental: null,\n    sentiment: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n//   const performAnalysis = async (type, stockSymbol) => {\n//     if (!stockSymbol) {\n//       setError('Please enter a stock symbol');\n//       return;\n//     }\n\n//     setLoading(true);\n//     setError(null);\n\n//     try {\n//       const prompt = generatePrompt(type, stockSymbol);\n//       const data = await generateAnalysis(prompt);\n//       const analysisResult = parseResponse(data.response);\n\n//       setAnalysis(prev => ({\n//         ...prev,\n//         [type]: analysisResult\n//       }));\n//     } catch (error) {\n//       console.error('Analysis error:', error);\n//       setError('Failed to perform analysis. Please try again.');\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n  return { analysis, loading, error, performAnalysis };\n};"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,aAAa,EAAEC,cAAc,QAAQ,qBAAqB;AAEnE,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC;IACvCQ,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE,IAAI;IACjBC,SAAS,EAAE;EACb,CAAC,CAAC;EACF,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE1C;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE,OAAO;IAAEM,QAAQ;IAAEK,OAAO;IAAEE,KAAK;IAAEE;EAAgB,CAAC;AACtD,CAAC;AAACV,EAAA,CApCWD,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}